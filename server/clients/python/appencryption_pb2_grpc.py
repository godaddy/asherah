# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import appencryption_pb2 as appencryption__pb2


class AppEncryptionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Session = channel.stream_stream(
        '/asherah.apps.server.AppEncryption/Session',
        request_serializer=appencryption__pb2.SessionRequest.SerializeToString,
        response_deserializer=appencryption__pb2.SessionResponse.FromString,
        )


class AppEncryptionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Session(self, request_iterator, context):
    """Performs session operations for a single partition.

    Each session must begin with a GetSession message with all subsequent
    Encrypt and Decrypt operations scoped its partition.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AppEncryptionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Session': grpc.stream_stream_rpc_method_handler(
          servicer.Session,
          request_deserializer=appencryption__pb2.SessionRequest.FromString,
          response_serializer=appencryption__pb2.SessionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'asherah.apps.server.AppEncryption', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
