use securememory::mem_sys::{DefaultMemoryManager, MemoryManager};
use securememory::protected_memory::DefaultSecretFactory;
use securememory::secret::{Secret, SecretFactory, SecretExtensions};
use std::sync::Arc;
use std::io::Read;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Creating memory manager...");
    let memory_manager = Arc::new(DefaultMemoryManager::new());
    println!("Memory manager created successfully");
    
    println!("Creating factory...");
    let factory = DefaultSecretFactory::new();
    println!("Secret factory created successfully");
    
    // Create a secret with known data
    println!("Creating secret...");
    let mut data = b"This is a test secret that will be wiped".to_vec();
    println!("Original data: {:?}", String::from_utf8_lossy(&data));
    
    let secret = factory.new(&mut data)?;
    println!("Secret created successfully, length: {}", secret.len());
    
    // Verify original data is wiped
    println!("Original data after wipe: {:?}", String::from_utf8_lossy(&data));
    assert_ne!(data, b"This is a test secret that will be wiped");
    
    // Read the secret using with_bytes
    println!("Accessing secret with with_bytes...");
    secret.with_bytes(|bytes| {
        println!("Secret data: {:?}", String::from_utf8_lossy(bytes));
        assert_eq!(bytes, b"This is a test secret that will be wiped");
        Ok(())
    })?;
    
    // Try using a reader
    println!("Accessing secret with reader...");
    let reader_result = secret.reader();
    match reader_result {
        Ok(mut reader) => {
            let mut buffer = vec![0u8; secret.len()];
            reader.read_exact(&mut buffer)?;
            println!("Read data: {:?}", String::from_utf8_lossy(&buffer));
            assert_eq!(&buffer, b"This is a test secret that will be wiped");
        }
        Err(e) => {
            println!("Error getting reader: {:?}", e);
            return Err(format!("Reader creation failed: {:?}", e).into());
        }
    }
    
    // Create a random secret
    println!("Creating random secret...");
    let random_secret = factory.create_random(32)?;
    println!("Random secret created with length: {}", random_secret.len());
    
    // Read the random secret
    println!("Reading random secret...");
    random_secret.with_bytes(|bytes| {
        println!("Random data (first 8 bytes): {:?}", &bytes[0..8]);
        Ok(())
    })?;
    
    // Close the secrets
    println!("Closing secrets...");
    secret.close()?;
    println!("First secret closed");
    
    random_secret.close()?;
    println!("Random secret closed");
    
    println!("All secret operations completed successfully!");
    Ok(())
}