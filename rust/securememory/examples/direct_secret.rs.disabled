use securememory::mem_sys::DefaultMemoryManager;
use securememory::protected_memory::ProtectedMemorySecret;
use std::sync::Arc;
use securememory::secret::Secret;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Creating memory manager...");
    let memory_manager = Arc::new(DefaultMemoryManager::new());
    println!("Memory manager created successfully");
    
    // Create a secret directly using ProtectedMemorySecret
    println!("Creating secret directly...");
    let data = b"Test secret data";
    let secret = ProtectedMemorySecret::new(data, memory_manager.clone())?;
    println!("Secret created successfully with length: {}", secret.len());
    
    // Close the secret
    println!("Closing secret...");
    secret.close()?;
    println!("Secret closed successfully");
    
    println!("Test completed successfully!");
    Ok(())
}