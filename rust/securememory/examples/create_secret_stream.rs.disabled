// Just verify that the memory management system works properly
use securememory::mem_sys::{DefaultMemoryManager, MemoryManager, MemoryProtection};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("\nCreating memory manager to test basic functionality...\n");

    // Create a memory manager
    let memory_manager = DefaultMemoryManager::new();
    println!("Memory manager created successfully!");
    
    // Allocate some memory
    let mut memory = memory_manager.alloc(64)?;
    println!("Allocated memory: {} bytes", memory.len());
    
    // Make it writable and test
    memory_manager.protect(&mut memory, MemoryProtection::ReadWrite)?;
    memory[0] = 123;
    println!("Successfully wrote to memory");
    
    // Make it read-only and test
    memory_manager.protect(&mut memory, MemoryProtection::ReadOnly)?;
    println!("Value in memory: {}", memory[0]);
    
    // Lock it to prevent swapping
    memory_manager.lock(&mut memory)?;
    println!("Memory locked successfully");
    
    // Unlock and clean up
    memory_manager.unlock(&mut memory)?;
    println!("Memory unlocked successfully");
    
    // Free the memory
    memory_manager.free(&mut memory)?;
    println!("Memory freed successfully");
    
    println!("\nTest completed successfully!");
    Ok(())
}