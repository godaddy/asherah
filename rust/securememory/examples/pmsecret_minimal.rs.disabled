use securememory::mem_sys::{DefaultMemoryManager, MemoryManager, MemoryProtection};
use std::sync::Arc;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Creating memory manager...");
    let memory_manager = Arc::new(DefaultMemoryManager::new());
    println!("Memory manager created successfully");
    
    // Let's try to test the secret implementation directly
    println!("Testing protected memory secret using low-level operations...");
    
    // First, let's allocate some memory
    println!("Allocating memory...");
    let size = 32;
    let mut memory = memory_manager.alloc(size)?;
    println!("Memory allocated: {} bytes", memory.len());
    
    // Make it writable
    println!("Setting memory to ReadWrite...");
    memory_manager.protect(&mut memory, MemoryProtection::ReadWrite)?;
    
    // Write some test data
    println!("Writing data to memory...");
    let test_data = b"Test data for protected memory";
    memory[..test_data.len().min(size)].copy_from_slice(&test_data[..test_data.len().min(size)]);
    
    // Make it read-only for security
    println!("Setting memory to ReadOnly...");
    memory_manager.protect(&mut memory, MemoryProtection::ReadOnly)?;
    
    // Lock the memory to prevent swapping
    println!("Locking memory...");
    memory_manager.lock(&mut memory)?;
    
    // Read the data back
    println!("Reading data...");
    let mut buffer = vec![0u8; size];
    buffer.copy_from_slice(&memory);
    println!("Read data: {:?}", String::from_utf8_lossy(&buffer[..test_data.len().min(size)]));
    
    // Make it writable for cleanup
    println!("Setting memory back to ReadWrite for cleanup...");
    memory_manager.protect(&mut memory, MemoryProtection::ReadWrite)?;
    
    // Unlock
    println!("Unlocking memory...");
    memory_manager.unlock(&mut memory)?;
    
    // Wipe the memory securely
    println!("Wiping memory...");
    memory.fill(0);
    
    // Free memory
    println!("Freeing memory...");
    memory_manager.free(&mut memory)?;
    
    println!("All protected memory operations completed successfully!");
    Ok(())
}