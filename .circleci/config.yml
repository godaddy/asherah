version: 2.1

# Aliases for convenience/templating
references:
  workspace_root: &workspace_root
    /tmp/workspace
  env_file: &env_file
    env-file
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  setup_env: &setup_env
    run:
      name: Setup Environment Variables
      command: |
        cat /tmp/workspace/env-file >> $BASH_ENV
  proceed_or_skip_job: &proceed_or_skip_job
    run:
      name: Check if Build Needed
      command: |
        project_fixed_up=$(echo $CIRCLE_JOB | tr - _ | tr '[:lower:]' '[:upper:]')
        if [ "${!project_fixed_up}" = "changed" ]; then
          echo "Changes detected or upstream dependency changed. Proceeding with build of ${CIRCLE_JOB}."
        else
          echo "No changes detected. Skipping build of ${CIRCLE_JOB}."
          circleci-agent step halt
        fi

orbs:
  compare-url: iynere/compare-url@1.2.0
  codecov: codecov/codecov@1.0.5

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - detect-changed-projects:
          workspace-dir: *workspace_root
          env-file: *env_file
      - languages-java-secure-memory:
          requires:
            - detect-changed-projects
      #- languages-java-app-encryption:
      #    requires:
      #      - detect-changed-projects
      #      - languages-java-secure-memory
      #- samples-java-reference-app:
      #    requires:
      #      - detect-changed-projects
      #      - languages-java-app-encryption
      #- tests-java-test-app:
      #    requires:
      #      - detect-changed-projects
      #      - languages-java-app-encryption
      - languages-csharp-logging:
          requires:
            - detect-changed-projects
#      - languages-csharp-secure-memory
#          requires:
#            - detect-changed-projects
#            - languages-csharp-logging
#      - languages-csharp-app-encryption
#          requires:
#            - detect-changed-projects
#            - languages-csharp-secure-memory
#      - samples-csharp-reference-app
#          requires:
#            - detect-changed-projects
#            - languages-csharp-app-encryption

jobs:
  detect-changed-projects:
    docker:
      - image: circleci/python:3.7
    parameters:
      workspace-dir:
        type: string
      env-file:
        type: string
    steps:
      - checkout
      # TEMP: Hack for https://github.com/iynere/compare-url/issues/25 -- duplicate the reconstruct call w/ patch
      #- compare-url/reconstruct
      - run:
          name: Reconstruct CIRCLE_COMPARE_URL
          when: always
          command: ./.circleci/compare-url-reconstruct-patch.sh
      - persist_to_workspace:
          root: .
          paths:
            - CIRCLE_COMPARE_URL.txt
            - BASE_COMPARE_COMMIT.txt
      - compare-url/use:
          step-name: Determine projects changed
          custom-logic: |
            # Some of this is based off https://github.com/Tufin/circleci-monorepo

            # Identify modified directories using compare-url ORB
            # Assumes structure of "languages/<lang>/<project>", "samples/<lang>/<project>", etc.
            git diff --name-only $COMMIT_RANGE  | cut -d/ -f1,2,3 | sort -u > project_candidates
            echo -e "Modified directories:\n$(cat project_candidates)\n"

            # Build affected projects and any downstream dependencies
            echo -e "Calculating dependencies\n"
            ./.circleci/calculate_dependencies.py project_candidates projects_to_build

            projects_inc_dep=($(cat projects_to_build))
            echo -e "Evaluating whether to build: ${projects_inc_dep[@]}\n"
            mkdir -p << parameters.workspace-dir >>
            touch << parameters.workspace-dir >>/<< parameters.env-file >>
            for project in ${projects_inc_dep[@]}; do
              if grep -Fxq $project project-dirs; then
                echo -e "\nWill trigger build for project: ${project}"
                project_fixed_up=$(echo $project | tr / _ | tr - _ | tr '[:lower:]' '[:upper:]')

                # We'll use an env variable to indicate when a project needs to be built downstream
                echo "export ${project_fixed_up}=changed" >> << parameters.workspace-dir >>/<< parameters.env-file >>
              fi
            done
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *env_file
  languages-java-secure-memory:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          # TODO : Need to use CIRCLE_WORKING_DIRECTORY
          # Refer to https://discuss.circleci.com/t/circle-working-directory-doesnt-expand/17007/5
          command: |
            cd languages/java/secure-memory
            ../../../scripts/checksum.sh /tmp/checksum.txt pom.xml
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd languages/java/secure-memory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/java/secure-memory
            ./scripts/test.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - store_test_results:
          path: languages/java/secure-memory/target/surefire-reports
      - codecov/upload:
          file: languages/java/secure-memory/target/site/jacoco/jacoco.xml
          flags: languages_java_secure_memory
  languages-java-app-encryption:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd languages/java/app-encryption
            ../../../scripts/checksum.sh /tmp/checksum.txt pom.xml
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd languages/java/app-encryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/java/app-encryption
            ./scripts/test.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - store_test_results:
          path: languages/java/app-encryption/target/surefire-reports
      - codecov/upload:
          file: languages/java/app-encryption/target/site/jacoco/jacoco.xml
          flags: languages_java_app_encryption
  samples-java-reference-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd samples/java/reference-app
            ../../../scripts/checksum.sh /tmp/checksum.txt pom.xml
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd samples/java/reference-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
  tests-java-test-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd tests/java/test-app
            ../../../scripts/checksum.sh /tmp/checksum.txt pom.xml
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd tests/java/test-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
  languages-csharp-logging:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd languages/csharp/Logging
            ../../../scripts/checksum.sh /tmp/checksum.txt *.csproj
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Build
          command: |
            cd languages/csharp/Logging
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/Logging
            ./scripts/test.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/Logging
            dotnet tool install -g trx2junit
            export PATH="$PATH:/root/.dotnet/tools"
            trx2junit Logging.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/Logging/Logging.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/Logging/Logging.Tests/coverage.opencover.xml
          flags: languages_csharp_Logging
  languages-csharp-secure-memory:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd languages/csharp/SecureMemory
            ../../../scripts/checksum.sh /tmp/checksum.txt *.csproj
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Build
          command: |
            cd languages/csharp/SecureMemory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/SecureMemory
            ./scripts/test.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/SecureMemory
            dotnet tool install -g trx2junit
            export PATH="$PATH:/root/.dotnet/tools"
            trx2junit SecureMemory.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/SecureMemory/SecureMemory.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/SecureMemory/SecureMemory.Tests/coverage.opencover.xml
          flags: languages_csharp_SecureMemory
  languages-csharp-app-encryption:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd languages/csharp/AppEncryption
            ../../../scripts/checksum.sh /tmp/checksum.txt *.csproj
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Build
          command: |
            cd languages/csharp/AppEncryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/AppEncryption
            ./scripts/test.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/AppEncryption
            dotnet tool install -g trx2junit
            export PATH="$PATH:/root/.dotnet/tools"
            trx2junit AppEncryption.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/AppEncryption/AppEncryption.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/AppEncryption/AppEncryption.Tests/coverage.opencover.xml
          flags: languages_csharp_AppEncryption
  samples-csharp-reference-app:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - *attach_workspace
      - *setup_env
      - *proceed_or_skip_job
      - checkout
      - run:
          name: Generate cache key
          command: |
            cd samples/csharp/ReferenceApp
            ../../../scripts/checksum.sh /tmp/checksum.txt *.csproj
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Build
          command: |
            cd samples/csharp/ReferenceApp
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
