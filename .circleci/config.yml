version: 2.1

# Aliases for convenience/templating
references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  codecov: codecov/codecov@1.0.5

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - languages-java-secure-memory
      - languages-java-app-encryption:
          requires:
            - languages-java-secure-memory
      - samples-java-reference-app:
          requires:
            - languages-java-app-encryption
      - tests-java-test-app:
          requires:
            - languages-java-app-encryption
      - languages-csharp-logging
      - languages-csharp-secure-memory:
          requires:
            - languages-csharp-logging
      - languages-csharp-app-encryption:
          requires:
            - languages-csharp-secure-memory
      - samples-csharp-reference-app:
          requires:
            - languages-csharp-app-encryption

jobs:
  languages-java-secure-memory:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd languages/java/secure-memory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/java/secure-memory
            ./scripts/test.sh
      - store_test_results:
          path: languages/java/secure-memory/target/surefire-reports
      - codecov/upload:
          file: languages/java/secure-memory/target/site/jacoco/jacoco.xml
          flags: languages_java_secure_memory
      - run:
          name: Install locally
          command: |
            cd languages/java/secure-memory
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd languages/java/secure-memory

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              #./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  languages-java-app-encryption:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd languages/java/app-encryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/java/app-encryption
            ./scripts/test.sh
      - store_test_results:
          path: languages/java/app-encryption/target/surefire-reports
      - codecov/upload:
          file: languages/java/app-encryption/target/site/jacoco/jacoco.xml
          flags: languages_java_app_encryption
      - run:
          name: Install locally
          command: |
            cd languages/java/app-encryption
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd languages/java/app-encryption

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              #./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  samples-java-reference-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd samples/java/reference-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  tests-java-test-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd tests/java/test-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  languages-csharp-logging:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd languages/csharp/Logging
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/Logging
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/Logging
            ~/.dotnet/tools/trx2junit Logging.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/Logging/Logging.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/Logging/Logging.Tests/coverage.opencover.xml
          flags: languages_csharp_Logging
      - run:
          name: Install locally
          command: |
            cd languages/csharp/Logging
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd languages/csharp/Logging

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  languages-csharp-secure-memory:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd languages/csharp/SecureMemory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/SecureMemory
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/SecureMemory
            ~/.dotnet/tools/trx2junit SecureMemory.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/SecureMemory/SecureMemory.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/SecureMemory/SecureMemory.Tests/coverage.opencover.xml
          flags: languages_csharp_SecureMemory
      - run:
          name: Install locally
          command: |
            cd languages/csharp/SecureMemory
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd languages/csharp/SecureMemory

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  languages-csharp-app-encryption:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
      - image: circleci/dynamodb
      - image: mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: Password123
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd languages/csharp/AppEncryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd languages/csharp/AppEncryption
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd languages/csharp/AppEncryption
            ~/.dotnet/tools/trx2junit AppEncryption.Tests/TestResults/*.trx
      - store_test_results:
          path: languages/csharp/AppEncryption/AppEncryption.Tests/TestResults
      - codecov/upload:
          file: languages/csharp/AppEncryption/AppEncryption.Tests/coverage.opencover.xml
          flags: languages_csharp_AppEncryption
      - run:
          name: Install locally
          command: |
            cd languages/csharp/AppEncryption
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd languages/csharp/AppEncryption

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  samples-csharp-reference-app:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd samples/csharp/ReferenceApp
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
