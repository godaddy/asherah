version: 2.1

# Aliases for convenience/templating
references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  codecov: codecov/codecov@1.0.5

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - java-secure-memory
      - java-app-encryption:
          requires:
            - java-secure-memory
      - samples-java-reference-app:
          requires:
            - java-app-encryption
      - tests-java-test-app:
          requires:
            - java-app-encryption
      - csharp-logging
      - csharp-secure-memory:
          requires:
            - csharp-logging
      - csharp-app-encryption:
          requires:
            - csharp-secure-memory
      - samples-csharp-reference-app:
          requires:
            - csharp-app-encryption
      - go-securememory
      - go-appencryption:
          requires:
            - go-securememory
      - go-referenceapp:
          requires:
            - go-appencryption
      - cross-language:
          requires:
            - java-app-encryption
            - csharp-app-encryption
            - go-appencryption

jobs:
  java-secure-memory:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd java/secure-memory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd java/secure-memory
            ./scripts/test.sh
      - store_test_results:
          path: java/secure-memory/target/surefire-reports
      - codecov/upload:
          file: java/secure-memory/target/site/jacoco/jacoco.xml
          flags: java_secure_memory
      - run:
          name: Install locally
          command: |
            cd java/secure-memory
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd java/secure-memory

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              #./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  java-app-encryption:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd java/app-encryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd java/app-encryption
            ./scripts/test.sh
      - store_test_results:
          path: java/app-encryption/target/surefire-reports
      - codecov/upload:
          file: java/app-encryption/target/site/jacoco/jacoco.xml
          flags: java_app_encryption
      - run:
          name: Install locally
          command: |
            cd java/app-encryption
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd java/app-encryption

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for master, RC tags, and prod release tags
            if [[ "${CIRCLE_BRANCH}" = "master" ]]; then
              echo "Detected master branch, proceeding to deploy Snapshot"
              #./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  samples-java-reference-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd samples/java/reference-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  tests-java-test-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - run:
          name: Build
          command: |
            cd tests/java/test-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-{{ .Branch }}-{{ .BuildNum }}
  csharp-logging:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/Logging
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd csharp/Logging
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/Logging
            ~/.dotnet/tools/trx2junit Logging.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/Logging/Logging.Tests/TestResults
      - codecov/upload:
          file: csharp/Logging/Logging.Tests/coverage.opencover.xml
          flags: csharp_Logging
      - run:
          name: Install locally
          command: |
            cd csharp/Logging
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd csharp/Logging

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  csharp-secure-memory:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/SecureMemory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd csharp/SecureMemory
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/SecureMemory
            ~/.dotnet/tools/trx2junit SecureMemory.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/SecureMemory/SecureMemory.Tests/TestResults
      - codecov/upload:
          file: csharp/SecureMemory/SecureMemory.Tests/coverage.opencover.xml
          flags: csharp_SecureMemory
      - run:
          name: Install locally
          command: |
            cd csharp/SecureMemory
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd csharp/SecureMemory

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  csharp-app-encryption:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
      - image: circleci/dynamodb
      - image: mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: Password123
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/AppEncryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd csharp/AppEncryption
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/AppEncryption
            ~/.dotnet/tools/trx2junit AppEncryption.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/AppEncryption/AppEncryption.Tests/TestResults
      - codecov/upload:
          file: csharp/AppEncryption/AppEncryption.Tests/coverage.opencover.xml
          flags: csharp_AppEncryption
      - run:
          name: Install locally
          command: |
            cd csharp/AppEncryption
            ./scripts/install_local.sh
      - run:
          name: Deploy if needed
          command: |
            cd csharp/AppEncryption

            # Rather than triggering off tag pushes, we inspect for whether HEAD of release branches are tagged
            TAG_NAME=$(git tag -l --points-at HEAD)
            echo "Branch = ${CIRCLE_BRANCH}, Tag = ${TAG_NAME}"

            # Only deploy for RC tags and prod release tags (we won't deploy alpha builds for C#)
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*-rc[0-9]*$ ]]; then
              echo "Detected tagged RC, proceeding to deploy"
              ./scripts/deploy.sh
            elif [[ "${CIRCLE_BRANCH}" =~ release-.* && "${TAG_NAME}" =~ ^v[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo "Detected tagged production release, proceeding to deploy"
              ./scripts/deploy.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  samples-csharp-reference-app:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd samples/csharp/ReferenceApp
            ./scripts/clean.sh
            ./scripts/build.sh
      - save_cache:
          paths:
            - ~/.nuget
          key: v1-nuget-{{ .Branch }}-{{ .BuildNum }}
  go-securememory:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Build
          command: |
            cd go/securememory
            ./scripts/build.sh
      - run:
          name: Unit Tests
          command: |
            cd go/securememory
            ./scripts/test.sh
      - run:
          name: Benchmark Tests
          command: |
            cd go/securememory
            ./scripts/benchmark_test.sh
      - run:
          name: Convert Test Results
          command: |
            cd go/securememory
            GO111MODULE=off go get github.com/axw/gocov/gocov
            GO111MODULE=off go get github.com/AlekSi/gocov-xml
            echo "Converting coverage.out to cobertura XML..."
            gocov convert coverage.out | gocov-xml > cobertura-coverage.xml
      - run:
          name: Static Analysis
          command: |
            cd go/securememory
            ./scripts/lint.sh
      - store_test_results:
          path: go/securememory
      - codecov/upload:
          file: go/securememory/cobertura-coverage.xml
          flags: go_securememory
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
  go-appencryption:
    docker:
      - image: circleci/golang
      - image: circleci/dynamodb
      - image: mysql:5.7
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: Password123
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Build
          command: |
            cd go/appencryption
            go get github.com/godaddy/asherah/go/securememory@${CIRCLE_BRANCH}
            ./scripts/build.sh
      - run:
          name: Unit Tests
          command: |
            cd go/appencryption
            ./scripts/test.sh
      - run:
          name: Benchmark Tests
          command: |
            cd go/appencryption
            ./scripts/benchmark_test.sh
      - run:
          name: Convert Test Results
          command: |
            cd go/appencryption
            GO111MODULE=off go get github.com/axw/gocov/gocov
            GO111MODULE=off go get github.com/AlekSi/gocov-xml
            echo "Converting coverage.out to cobertura XML..."
            gocov convert coverage.out | gocov-xml > cobertura-coverage.xml
      - run:
          name: Static Analysis
          command: |
            cd go/appencryption
            ./scripts/lint.sh
      - store_test_results:
          path: go/appencryption
      - codecov/upload:
          file: go/appencryption/cobertura-coverage.xml
          flags: go_appencryption
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
  go-referenceapp:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore_cache:
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Build
          command: |
            cd samples/go/referenceapp
            go get github.com/godaddy/asherah/go/appencryption@${CIRCLE_BRANCH}
            ./scripts/build.sh
      - run:
          name: Static Analysis
          command: |
            cd samples/go/referenceapp
            ./scripts/lint.sh
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
  cross-language:
    docker:
      - image: ubuntu:18.04
      - image: mysql:5.7
        environment:
          MYSQL_DATABASE: testdb
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: Password123
    steps:
      - checkout
      - run:
          name: Initialize RDBMS based metastore
          command: |
            apt-get update
            apt-get -y upgrade
            apt-get install -y mariadb-server ca-certificates
            mysql -h 127.0.0.1 -u ${TEST_DB_USER} -p${TEST_DB_PASSWORD} -e "CREATE TABLE ${TEST_DB_NAME}.encryption_key (
              id             VARCHAR(255) NOT NULL,
              created        TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
              key_record     TEXT         NOT NULL,
              PRIMARY KEY (id, created),
              INDEX (created)
            );"
      # when project files change, use increasingly general patterns to restore cache.
      # vN prefix in case we ever need to regenerate all caches
      - restore_cache:
          name: Restore JAVA packages
          keys:
            - v1-maven-{{ .Branch }}-{{ .BuildNum }}
            - v1-maven-{{ .Branch }}-
            - v1-maven-
      - restore_cache:
          name: Restore C# packages
          keys:
            - v1-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v1-nuget-{{ .Branch }}-
            - v1-nuget-
      - restore_cache:
          name: Restore GO packages
          keys:
            - go-mod-v4-{{ .Branch }}-{{ .BuildNum }}
            - go-mod-v4-{{ .Branch }}-
            - go-mod-v4-
      - run:
          name: Setup java environment
          command: |
            # Need to copy the java cache from circleci user to root user
            cp -R /home/circleci/.m2/ /root/.m2/
            apt-get install -y openjdk-11-jdk
            apt-get install -y maven
      - run:
          name: Setup csharp environment
          command: |
            apt-get install -y wget
            wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            dpkg -i packages-microsoft-prod.deb
            apt-get install -y apt-transport-https
            apt-get update
            apt-get install -y dotnet-sdk-2.1
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Setup go environment
          command: |
            wget https://dl.google.com/go/go1.14.linux-amd64.tar.gz
            tar -C /usr/local/ -xzf go*.tar.gz
            export PATH=$PATH:/usr/local/go/bin
      - run:
          name: Test
          command: |
            cd tests/cross-language/
            ./scripts/test.sh

