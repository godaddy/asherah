version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

parameters:
  db-name:
    type: "string"
    default: "testdb"
  db-user:
    type: "string"
    default: "root"
  db-password:
    type: "string"
    default: "Password123"

commands:
  maybe-deploy:
    description: "If required, deploy the specified project"
    parameters:
      project:
        type: string
      version:
        type: string
    steps:
      - run:
          name: Deploy
          command: |
            cd <<parameters.project>>

            BASE_VERSION=$(<<parameters.version>>)
            VERSION_SUFFIX=`echo ${BASE_VERSION} | cut -f2 -d'-'`

            # We want to trigger deployments only on the release branch, for modules with no version suffix
            if [[ "${CIRCLE_BRANCH}" =~ release-.* && "${VERSION_SUFFIX}" != "alpha" ]]; then
              mkdir -p ~/.ssh
              echo "Adding github.com as known host."
              echo $GITHUB_PUBLIC_KEY >> ~/.ssh/known_hosts
              echo "Setting private SSH key."
              echo $GITHUB_COMMIT_KEY | base64 --decode >> ~/.ssh/id_rsa_git
              chmod 400 ~/.ssh/id_rsa_git # prevents "UNPROTECTED PRIVATE KEY FILE" error

              ./scripts/release_prod.sh
            else
              echo "Not releasable build, skipping deployment step"
            fi
  restore-java-cache:
    steps:
      - restore_cache:
          name: Restore JAVA pacakges from cache
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v4-maven-{{ .Branch }}-{{ .BuildNum }}
            - v4-maven-{{ .Branch }}-
            - v4-maven-
  restore-csharp-cache:
    steps:
      - restore_cache:
          name: Restore NuGet packages from cache
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v4-nuget-{{ .Branch }}-{{ .BuildNum }}
            - v4-nuget-{{ .Branch }}-
            - v4-nuget-
  restore-go-cache:
    steps:
      - restore_cache:
          name: Restore Go packages from cache
          keys:
            # when project files change, use increasingly general patterns to restore cache.
            # vN prefix in case we ever need to regenerate all caches
            - v4-go-mod-{{ .Branch }}-{{ .BuildNum }}
            - v4-go-mod-{{ .Branch }}-
            - v4-go-mod-
  save-java-cache:
    steps:
      - save_cache:
          name: Save JAVA packages to cache
          paths:
            - ~/.m2
          key: v4-maven-{{ .Branch }}-{{ .BuildNum }}
  save-csharp-cache:
    steps:
      - save_cache:
          name: Save NuGet packages to cache
          paths:
            - ~/.nuget
          key: v4-nuget-{{ .Branch }}-{{ .BuildNum }}
  save-go-cache:
    steps:
      - save_cache:
          name: Save Go packages to cache
          paths:
            - /go/pkg/mod
          key: v4-go-mod-{{ .Branch }}-{{ .BuildNum }}

workflows:
  version: 2
  build-test-and-maybe-deploy:
    jobs:
      - java-secure-memory
      - java-app-encryption:
          requires:
            - java-secure-memory
      - samples-java-reference-app:
          requires:
            - java-app-encryption
      - tests-java-test-app:
          requires:
            - java-app-encryption
      - csharp-logging
      - csharp-secure-memory:
          requires:
            - csharp-logging
      - csharp-app-encryption:
          requires:
            - csharp-secure-memory
      - samples-csharp-reference-app:
          requires:
            - csharp-app-encryption
      - go-securememory
      - go-appencryption:
          requires:
            - go-securememory
      - samples-go-reference-app:
          requires:
            - go-appencryption
      - server-go:
          requires:
            - go-appencryption
      - server-java:
          requires:
            - java-app-encryption
      - server-samples:
          requires:
            - server-go
            - server-java
      - tests-cross-language:
          requires:
            - csharp-app-encryption
            - go-appencryption
            - java-app-encryption
            - server-go
            - server-java

jobs:
  java-secure-memory:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore-java-cache
      - run:
          name: Build
          command: |
            cd java/secure-memory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd java/secure-memory
            ./scripts/test.sh
      - store_test_results:
          path: java/secure-memory/target/surefire-reports
      - codecov/upload:
          file: java/secure-memory/target/site/jacoco/jacoco.xml
          flags: java_secure_memory
          conf: codecov.yml
      - maybe-deploy:
          project: java/secure-memory
          version: mvn -q -DforceStdout help:evaluate -Dexpression=project.version
      - save-java-cache
  java-app-encryption:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore-java-cache
      - run:
          name: Build
          command: |
            cd java/app-encryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            source ./.circleci/set_env_variables.sh
            cd java/app-encryption
            ./scripts/test.sh
      - store_test_results:
          path: java/app-encryption/target/surefire-reports
      - codecov/upload:
          file: java/app-encryption/target/site/jacoco/jacoco.xml
          flags: java_app_encryption
          conf: codecov.yml
      - maybe-deploy:
          project: java/app-encryption
          version: mvn -q -DforceStdout help:evaluate -Dexpression=project.version
      - save-java-cache
  samples-java-reference-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore-java-cache
      - run:
          name: Build
          command: |
            cd samples/java/reference-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save-java-cache
  tests-java-test-app:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore-java-cache
      - run:
          name: Build
          command: |
            cd tests/java/test-app
            ./scripts/clean.sh
            ./scripts/build.sh
      - save-java-cache
  csharp-logging:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore-csharp-cache
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/Logging
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd csharp/Logging
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/Logging
            ~/.dotnet/tools/trx2junit Logging.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/Logging/Logging.Tests/TestResults
      - codecov/upload:
          file: csharp/Logging/Logging.Tests/coverage.opencover.xml
          flags: csharp_Logging
          conf: codecov.yml
      - maybe-deploy:
          project: csharp/Logging
          version: xmllint --xpath "//Project/PropertyGroup/Version/text()" Directory.Build.props
      - save-csharp-cache
  csharp-secure-memory:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore-csharp-cache
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/SecureMemory
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            cd csharp/SecureMemory
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/SecureMemory
            ~/.dotnet/tools/trx2junit SecureMemory.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/SecureMemory/SecureMemory.Tests/TestResults
      - codecov/upload:
          file: csharp/SecureMemory/SecureMemory.Tests/coverage.opencover.xml
          flags: csharp_SecureMemory
          conf: codecov.yml
      - maybe-deploy:
          project: csharp/SecureMemory
          version: xmllint --xpath "//Project/PropertyGroup/Version/text()" Directory.Build.props
      - save-csharp-cache
  csharp-app-encryption:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
      - image: circleci/dynamodb
      - image: mysql:5.7
        environment:
          MYSQL_USER: <<pipeline.parameters.db-user>>
          MYSQL_ROOT_PASSWORD: <<pipeline.parameters.db-password>>
    steps:
      - checkout
      - restore-csharp-cache
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd csharp/AppEncryption
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            source ./.circleci/set_env_variables.sh
            cd csharp/AppEncryption
            ./scripts/test.sh
      - run:
          name: Convert test results
          command: |
            cd csharp/AppEncryption
            ~/.dotnet/tools/trx2junit AppEncryption.Tests/TestResults/*.trx
      - store_test_results:
          path: csharp/AppEncryption/AppEncryption.Tests/TestResults
      - codecov/upload:
          file: csharp/AppEncryption/AppEncryption.Tests/coverage.opencover.xml
          flags: csharp_AppEncryption
          conf: codecov.yml
      - run:
          name: Integration Tests
          command: |
            source ./.circleci/set_env_variables.sh
            cd csharp/AppEncryption
            ./scripts/integration_test.sh
      - maybe-deploy:
          project: csharp/AppEncryption
          version: xmllint --xpath "//Project/PropertyGroup/Version/text()" Directory.Build.props
      - save-csharp-cache
  samples-csharp-reference-app:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore-csharp-cache
      - run:
          name: Setup csharp environment
          command: |
            apt-get update
            apt-get install -y libxml2-utils
            dotnet tool install -g trx2junit
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Build
          command: |
            cd samples/csharp/ReferenceApp
            ./scripts/clean.sh
            ./scripts/build.sh
      - save-csharp-cache
  go-securememory:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore-go-cache
      - run:
          name: Build
          command: |
            cd go/securememory
            ./scripts/build.sh
      - run:
          name: Unit Tests
          command: |
            cd go/securememory
            ./scripts/test.sh
      - run:
          name: Benchmark Tests
          command: |
            cd go/securememory
            ./scripts/benchmark_test.sh
      - run:
          name: Convert Test Results
          command: |
            cd go/securememory
            GO111MODULE=off go get github.com/axw/gocov/gocov
            GO111MODULE=off go get github.com/AlekSi/gocov-xml
            echo "Converting coverage.out to cobertura XML..."
            gocov convert coverage.out | gocov-xml > cobertura-coverage.xml
      - run:
          name: Static Analysis
          command: |
            cd go/securememory
            ./scripts/lint.sh
      - store_test_results:
          path: go/securememory
      - codecov/upload:
          file: go/securememory/cobertura-coverage.xml
          flags: go_securememory
          conf: codecov.yml
      - maybe-deploy:
          project: go/securememory
          version: cat .versionfile
      - save-go-cache
  go-appencryption:
    docker:
      - image: circleci/golang
      - image: circleci/dynamodb
      - image: mysql:5.7
        environment:
          MYSQL_USER: <<pipeline.parameters.db-user>>
          MYSQL_ROOT_PASSWORD: <<pipeline.parameters.db-password>>
    steps:
      - checkout
      - restore-go-cache
      - run:
          name: Build
          command: |
            cd go/appencryption
            ./scripts/build.sh
      - run:
          name: Unit Tests
          command: |
            source ./.circleci/set_env_variables.sh
            cd go/appencryption
            ./scripts/test.sh
      - run:
          name: Benchmark Tests
          command: |
            cd go/appencryption
            ./scripts/benchmark_test.sh
      - run:
          name: Convert Test Results
          command: |
            cd go/appencryption
            GO111MODULE=off go get github.com/axw/gocov/gocov
            GO111MODULE=off go get github.com/AlekSi/gocov-xml
            echo "Converting coverage.out to cobertura XML..."
            gocov convert coverage.out | gocov-xml > cobertura-coverage.xml
      - run:
          name: Static Analysis
          command: |
            cd go/appencryption
            ./scripts/lint.sh
      - store_test_results:
          path: go/appencryption
      - codecov/upload:
          file: go/appencryption/cobertura-coverage.xml
          flags: go_appencryption
          conf: codecov.yml
      - maybe-deploy:
          project: go/appencryption
          version: cat .versionfile
      - save-go-cache
  samples-go-reference-app:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore-go-cache
      - run:
          name: Build
          command: |
            cd samples/go/referenceapp
            ./scripts/build.sh
      - run:
          name: Static Analysis
          command: |
            cd samples/go/referenceapp
            ./scripts/lint.sh
      - save-go-cache
  server-go:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore-go-cache
      - run:
          name: Build
          command: |
            cd server/go
            ./scripts/build.sh
      - run:
          name: Unit Tests
          command: |
            cd server/go
            ./scripts/test.sh
      - run:
          name: Convert Test Results
          command: |
            cd server/go
            GO111MODULE=off go get github.com/axw/gocov/gocov
            GO111MODULE=off go get github.com/AlekSi/gocov-xml
            echo "Converting coverage.out to cobertura XML..."
            gocov convert coverage.out | gocov-xml > cobertura-coverage.xml
      - run:
          name: Static Analysis
          command: |
            cd server/go
            ./scripts/lint.sh
      - store_test_results:
          path: server/go
      - codecov/upload:
          file: server/go/cobertura-coverage.xml
          flags: server_go
          conf: codecov.yml
      - save-go-cache
  server-java:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore-java-cache
      - run:
          name: Build
          command: |
            cd server/java
            ./scripts/clean.sh
            ./scripts/build.sh
      - run:
          name: Tests
          command: |
            source ./.circleci/set_env_variables.sh
            cd server/java
            ./scripts/test.sh
      - store_test_results:
          path: server/java/target/surefire-reports
      - codecov/upload:
          file: server/java/target/site/jacoco/jacoco.xml
          flags: server_java
          conf: codecov.yml
      - save-java-cache
  server-samples:
    docker:
      - image: ubuntu:18.04
        environment:
          GOROOT: /usr/local/go
          GOPATH: /go
          GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Initialize container
          command: |
            apt-get update
            apt-get -y upgrade
            apt-get install -y ca-certificates wget curl build-essential
      - restore_cache:
          name: Restore clients packages
          keys:
            - v4-clients-{{ .Branch }}-{{ .BuildNum }}
            - v4-clients-{{ .Branch }}-
            - v4-clients-
      - run:
          name: Setup java environment
          command: |
            apt-get install -y openjdk-8-jdk
            apt-get install -y maven
            # Delete Java gRPC server from local maven repo/cache and build from the current branch
            rm -rf ~/.m2/repository/com/godaddy/asherah/grpc-server
            mvn clean install -f server/java/pom.xml -DskipTests
      - run:
          name: Setup go environment
          command: |
            wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz
            tar -C /usr/local/ -xzf go*.tar.gz
      - run:
          name: Setup python environment
          command: |
            apt-get -y install python3.7 python3-distutils
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3.7 get-pip.py
      - run:
          name: Setup node environment
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs
      - run:
          name: Test clients
          command: |
            cd server/samples/clients
            ./test_clients.sh
      - save_cache:
          paths:
            - ~/.cache
            - ~/.m2
            - /go/pkg/mod
          key: v4-clients-{{ .Branch }}-{{ .BuildNum }}
  tests-cross-language:
    docker:
      - image: ubuntu:18.04
        environment:
          GOROOT: /usr/local/go
          GOPATH: /go
          GO111MODULE: "on"
      - image: mysql:5.7
        environment:
          MYSQL_DATABASE: <<pipeline.parameters.db-name>>
          MYSQL_USER: <<pipeline.parameters.db-user>>
          MYSQL_ROOT_PASSWORD: <<pipeline.parameters.db-password>>
    steps:
      - checkout
      - run:
          name: Initialize RDBMS based metastore
          command: |
            apt-get update
            apt-get -y upgrade
            apt-get install -y mariadb-server ca-certificates
            mysql -h 127.0.0.1 -u <<pipeline.parameters.db-user>> -p<<pipeline.parameters.db-password>> -e "CREATE TABLE <<pipeline.parameters.db-name>>.encryption_key (
              id             VARCHAR(255) NOT NULL,
              created        TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
              key_record     TEXT         NOT NULL,
              PRIMARY KEY (id, created),
              INDEX (created)
            );"
      # when project files change, use increasingly general patterns to restore cache.
      # vN prefix in case we ever need to regenerate all caches
      - restore_cache:
          name: Restore CLTF packages
          keys:
            - v4-cltf-{{ .Branch }}-{{ .BuildNum }}
            - v4-cltf-{{ .Branch }}-
            - v4-cltf-
      - run:
          name: Setup java environment
          command: |
            apt-get install -y openjdk-8-jdk
            apt-get install -y maven
            # Delete Java appencryption & gRPC server from local maven repo/cache and build from the current branch
            rm -rf ~/.m2/repository/com/godaddy/asherah/grpc-server ~/.m2/repository/com/godaddy/asherah/appencryption
            mvn clean install -f java/app-encryption/pom.xml -DskipTests
            mvn clean install -f server/java/pom.xml -DskipTests
      - run:
          name: Setup csharp environment
          command: |
            apt-get install -y wget curl
            wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            dpkg -i packages-microsoft-prod.deb
            apt-get install -y apt-transport-https
            apt-get update
            apt-get install -y dotnet-sdk-3.1
            mkdir -p ~/.nuget/{NuGet,packages}
            cp build/NuGet.Config ~/.nuget/NuGet/
      - run:
          name: Setup go environment
          command: |
            apt-get install -y build-essential
            wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz
            tar -C /usr/local/ -xzf go*.tar.gz
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            go get github.com/cucumber/godog/cmd/godog@v0.8.1
      - run:
          name: Setup python environment
          command: |
            apt-get install -y python3.7 python3-distutils
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3.7 get-pip.py
      - run:
          name: Build
          command: |
            # Build the Java project
            cd tests/cross-language/java
            ./scripts/build.sh

            # Build the C# project
            cd ../csharp
            ./scripts/clean.sh
            ./scripts/build.sh

            # Lint & Build the Go project
            cd ../go
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            ./scripts/lint.sh
            go mod edit -replace github.com/godaddy/asherah/go/appencryption=../../../go/appencryption
            ./scripts/build.sh
      - run:
          name: Test
          command: |
            export TEST_DB_NAME=<<pipeline.parameters.db-name>>
            export TEST_DB_PASSWORD=<<pipeline.parameters.db-password>>
            export TEST_DB_USER=<<pipeline.parameters.db-user>>
            export ASHERAH_SERVICE_NAME=service
            export ASHERAH_PRODUCT_NAME=product
            export ASHERAH_KMS_MODE=static
            export JAVA_AE_VERSION=$(mvn -f java/app-encryption/pom.xml -q -DforceStdout help:evaluate -Dexpression=project.version)
            cd tests/cross-language/
            ./scripts/encrypt_all.sh
            ./scripts/decrypt_all.sh
      - save_cache:
          paths:
            - ~/.cache
            - ~/.m2
            - ~/.nuget
            - /go/pkg/mod
          key: v4-cltf-{{ .Branch }}-{{ .BuildNum }}
