###############################################################
# WhiteSource Unified-Agent configuration file
###############################################################
# GENERAL SCAN MODE: Files and Package Managers
###############################################################
# Organization vitals
######################

#apiKey=
#userKey is required if WhiteSource administrator has enabled "Enforce user level access" option
#userKey=
#requesterEmail=user@provider.com

#projectName=
#projectVersion=
#projectToken=
#projectTag= key:value

#productName=
#productVersion=
#productToken=

#projectPerFolder=true
#projectPerFolderIncludes=
#projectPerFolderExcludes=

#wss.connectionTimeoutMinutes=60

# Change the below URL to your WhiteSource server.
# Use the 'WhiteSource Server URL' which can be retrieved
# from your 'Profile' page on the 'Server URLs' panel.
# Then, add the '/agent' path to it.
wss.url=https://app.whitesourcesoftware.com/agent

############
# Policies #
############
checkPolicies=false
forceCheckAllDependencies=true
forceUpdate=false
forceUpdate.failBuildOnPolicyViolation=false
#updateInventory=false

###########
# General #
###########
#offline=false
#updateType=APPEND
#ignoreSourceFiles=true
scanComment=
#failErrorLevel=ALL
#requireKnownSha1=false

#generateProjectDetailsJson=true
#generateScanReport=true
#scanReportTimeoutMinutes=10
#scanReportFilenameFormat=

#analyzeFrameworks=true
#analyzeFrameworksReference=

#updateEmptyProject=false

#log.files.level=
#log.files.maxFileSize=
#log.files.maxFilesCount=
#log.files.path=
sendLogsToWss=true

########################################
# Package Manager Dependency resolvers #
########################################
resolveAllDependencies=false
#excludeDependenciesFromNodes=.*commons-io.*,.*maven-model

npm.resolveDependencies=false
#npm.ignoreSourceFiles=false
#npm.includeDevDependencies=true
#npm.runPreStep=true
#npm.ignoreNpmLsErrors=true
#npm.ignoreScripts=true
#npm.yarnProject=true
#npm.accessToken=
#npm.identifyByNameAndVersion=true
#npm.yarn.frozenLockfile=true
#npm.resolveMainPackageJsonOnly=true
#npm.removeDuplicateDependencies=false
#npm.resolveAdditionalDependencies=true
#npm.failOnNpmLsErrors =
#npm.projectNameFromDependencyFile = true
#npm.resolveGlobalPackages=true
#npm.resolveLockFile=true

nuget.resolvePackagesConfigFiles=true
nuget.resolveCsProjFiles=true
nuget.resolveDependencies=true
nuget.restoreDependencies=true
#nuget.preferredEnvironment=
#nuget.packagesDirectory=
#nuget.ignoreSourceFiles=false
#nuget.runPreStep=true
#nuget.resolveNuspecFiles=false
#nuget.resolveAssetsFiles=true

python.resolveDependencies=false

maven.ignoredScopes=test provided
maven.resolveDependencies=true
#maven.ignoreSourceFiles=true
#maven.aggregateModules=true
#maven.ignorePomModules=false
maven.runPreStep=false
#maven.ignoreMvnTreeErrors=true
#maven.environmentPath=
#maven.m2RepositoryPath=
maven.downloadMissingDependencies=true
#maven.additionalArguments=
#maven.projectNameFromDependencyFile=true

go.resolveDependencies=true
go.collectDependenciesAtRuntime=false
go.dependencyManager=modules
#go.ignoreSourceFiles=true
#go.glide.ignoreTestPackages=false
#go.gogradle.enableTaskAlias=true

###########################################################################################
# Includes/Excludes Glob patterns - Please use only one exclude line and one include line #
###########################################################################################
includes=**/*

#Exclude file extensions or specific directories by adding **/*.<extension> or **/<excluded_dir>/**
excludes=**/*sources.jar **/*javadoc.jar

case.sensitive.glob=false
followSymbolicLinks=true

######################
# Archive properties #
######################
#archiveExtractionDepth=2
#archiveIncludes=**/*.war **/*.ear
#archiveExcludes=**/*sources.jar

##############
# SCAN MODES #
##############

# Docker images
################
#docker.scanImages=true
#docker.includes=.*.*
#docker.excludes=
#docker.pull.enable=true
#docker.pull.images=.*.*
#docker.pull.maxImages=10
#docker.pull.tags=.*.*
#docker.pull.digest=
#docker.delete.force=true
#docker.login.sudo=false
#docker.projectNameFormat=default
#docker.scanTarFiles=true

#docker.aws.enable=true
#docker.aws.registryIds=

#docker.azure.enable=true
#docker.azure.userName=
#docker.azure.userPassword=
#docker.azure.registryNames=
#docker.azure.authenticationType=containerRegistry
#docker.azure.registryAuthenticationParameters=<registry1UserName>:<registry1Password> <registry2UserName>:<registry2Password>

#docker.artifactory.enable=true
#docker.artifactory.url=
#docker.artifactory.pullUrl=
#docker.artifactory.userName=
#docker.artifactory.userPassword=
#docker.artifactory.repositoriesNames=
#docker.artifactory.dockerAccessMethod=

#docker.hub.enabled=true
#docker.hub.userName=
#docker.hub.userPassword=
#docker.hub.organizationsNames=

# Docker containers
####################
#docker.scanContainers=true
#docker.containerIncludes=.*.*
#docker.containerExcludes=

# Linux package manager settings
################################
#scanPackageManager=true

# Serverless settings
######################
#serverless.provider=
#serverless.scanFunctions=true
#serverless.includes=
#serverless.excludes=
#serverless.region=
#serverless.maxFunctions=10

# Artifactory settings
########################
#artifactory.enableScan=true
#artifactory.url=
#artifactory.accessToken=
#artifactory.repoKeys=
#artifactory.userName=
#artifactory.userPassword=

##################
# Proxy settings #
##################
#proxy.host=
#proxy.port=
#proxy.user=
#proxy.pass=

################
# SCM settings #
################
#scm.type=git
#scm.user=
#scm.pass=
#scm.ppk=
#scm.url=https://github.com/sushantmimani/asherah
#scm.branch=master
#scm.tag=
#scm.npmInstall=false
#scm.npmInstallTimeoutMinutes=
#scm.repositoriesFile=
