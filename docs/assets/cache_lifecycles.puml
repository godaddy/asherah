@startuml

skinparam shadowing false

legend left
|= Type |= Description |
| MK | Master Key, root key from KMS |
| SK | System Key, encrypted by MK |
| IK | Intermediate Key, encrypted by SK |
endlegend

participant Caller
participant API
boundary SessionFactory
collections "Session Cache"
collections "SK Cache"
boundary Session
collections "IK Cache"
database Metastore
entity KMS

API -> API : startup initiated
API -> SessionFactory : create new factory
SessionFactory -> "Session Cache" : create new \nSession cache
activate "Session Cache"
SessionFactory -> "SK Cache" : create new \nSK cache
activate "SK Cache"
API -> API : startup completes
|||
Caller -> API : API call User 1
API -> SessionFactory : create new session
SessionFactory -> Session : create new instance
SessionFactory -> "Session Cache" : cache session
Session -> "IK Cache" : create new IK cache
activate "IK Cache"
API -> Session : operation 1
Session -> Metastore : fetch IK
Session -> Metastore : fetch SK
Session -> KMS : decrypt SK with MK
Session -> "SK Cache" : cache SK
Session -> Session : decrypt IK with SK
Session -> "IK Cache" : cache IK
Session -> API : complete operation 1
|||
API -> Session : operation 2
Session -> "IK Cache" : get IK from cache
Session -> API : complete operation 2
|||
API -> Session : close session
Session -> "Session Cache" : update Session cache
deactivate "IK Cache"
API -> Caller : API call User 1 result
|||
|||
Caller -> API : API call User 2
API -> SessionFactory : create new session
"Session Cache" -> Session : get cached session if available\nelse create new instance
activate "IK Cache"
API -> Session : operation 1
Session -> Metastore : fetch IK
Session -> "SK Cache" : get SK from cache
Session -> Session : decrypt IK with SK
Session -> "IK Cache" : cache IK
Session -> API : complete operation 1
|||
API -> Session : close session
Session -> "Session Cache" : update Session cache
deactivate "IK Cache"
API -> Caller : API call User 2 result
|||
|||
SessionFactory -> SessionFactory : session cache \nexpire timeout triggered
SessionFactory -> "Session Cache" : expire session
Session -> "IK Cache" : securely close IK cache
destroy "IK Cache"
|||
API -> API : shutdown initiated
API -> SessionFactory : close session factory
SessionFactory -> "SK Cache" : securely close SK cache
destroy "SK Cache"
SessionFactory -> "Session Cache" : close Session cache
destroy "Session Cache"
API -> API : shutdown completes

@enduml
